Обработка нескольких дескрипторов.
Poll-инг (простой опрос), очевидно, плох.
Интерфейсы (эквивалентны):

1) poll() или select()
Лунёв любит select(), но они абсолютно эквивалентны.

int select(int fdmax, fd_set* readfd, fd_set* writefd, fd_set* except_fd, struct timeval* timeout)

fd_set: абстрактный тип. Абстрактные операции:
FD_CLR
FD_SET
FD_ZERO
FD_ISSET

writefd, readfd -- модицицируются (после возврата установлены битики FD_ISSET напротив тех дескрипторов, которые доступны для I/O операций)

POSIX: read(), write() гарантированно вернёт успех после select() (частично успешно)


Медленные. В новых ОС epoll, eselect (наборы fd_set хрантся внутри ОС) -- только быстрее


fdmax: max fd + 1



ЗАДАЧА:
программа: 2 аргумента. 1 -- количество процессов, которые она должна породить, второе -- имя файла, который нужно через эти процессы протолкнуть.

Есть родительский процесс, взаимодействующий со своими детьми. Дети из одного fd читают, в другой пишут. Детские дескрипторы - блокироующие.

попробовать организовать структуру данных так, чтобы всё, что относится к одному соединению, лежало бы в одной структуре.

Буфера:
использовать буфера целиком (пытаться читать весь буфер целиком).
0     1        2       3
3^n*4k 3^(n-1)*4k 3^(n-2)*4k 3^(n-3)*4k ... -- в родителе

в ребенке читать по сколько угодно

для признака конца нельзя использовать количество переданных байт или размер файла.

не забыть, что операции чтения-записи могут быть частично успешными. 100% CPU поедать нельзя.